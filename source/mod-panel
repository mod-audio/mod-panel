#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# MOD-Panel
# Copyright (C) 2014-2021 Filipe Coelho <falktx@falktx.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of
# the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# For a full copy of the GNU General Public License see the LICENSE file.

# ------------------------------------------------------------------------------------------------------------
# Imports (Config)

from mod_config import *

# ------------------------------------------------------------------------------------------------------------
# Imports (Global)

import os
import sys

if config_UseQt5:
    from PyQt5.QtCore import pyqtSlot, Qt, QProcess, QSettings, QTimer, QUrl
    from PyQt5.QtGui import QDesktopServices, QIcon
    from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox
else:
    from PyQt4.QtCore import pyqtSlot,Qt, QProcess, QSettings, QTimer, QUrl
    from PyQt4.QtGui import QDesktopServices, QIcon
    from PyQt4.QtGui import QApplication, QMainWindow, QMessageBox

# ------------------------------------------------------------------------------------------------------------
# Import Signal

from signal import signal, SIGINT, SIGTERM

# ------------------------------------------------------------------------------------------------------------
# Imports (UI)

from ui_mod_panel import Ui_PanelWindow

# ------------------------------------------------------------------------------------------------------------
# Signal handler

def signalHandler(sig, frame):
    if sig not in (SIGINT, SIGTERM):
        return

    app = QApplication.instance()

    if app is None:
        return

    QTimer.singleShot(0, app.quit)

def setUpSignals():
    signal(SIGINT,  signalHandler)
    signal(SIGTERM, signalHandler)

# ------------------------------------------------------------------------------------------------------------
# Panel Window

class PanelWindow(QMainWindow):
    def __init__(self, parent=None):
        QMainWindow.__init__(self, parent)
        self.ui = Ui_PanelWindow()
        self.ui.setupUi(self)

        # ----------------------------------------------------------------------------------------------------
        # Internal stuff

        self.fProccessBackend = QProcess(self)
        self.fProccessBackend.setProcessChannelMode(QProcess.MergedChannels)
        self.fStartingBackend = False
        self.fStoppingBackend = False

        self.fProccessUI = QProcess(self)
        self.fProccessUI.setProcessChannelMode(QProcess.MergedChannels)
        self.fStartingUI = False
        self.fStoppingUI = False

        self.fProccessSDK = QProcess(self)
        self.fProccessSDK.setProcessChannelMode(QProcess.MergedChannels)
        self.fStartingSDK = False
        self.fStoppingSDK = False

        # ----------------------------------------------------------------------------------------------------
        # Set up GUI (content)

        self.ui.l_ui_details.setText(self.tr("""<br/>
            <b>Audio host backend and Web-server for MOD</b>.<br/><br/>
            This is the UI for the MOD software.<br/>
            It's a webserver that delivers an HTML5 interface and communicates with the mod backend.<br/>
        """))

        self.ui.l_sdk_details.setText(self.tr("""<br/>
            <b>SDK to implement the MOD GUI interface</b>.<br/><br/>
            This SDK's goal is to allow LV2 plugin developers to implement the MOD GUI extension.<br/>
            In MOD GUI, every plugin has a real pedal like representation in a web based environment,
            with several plugins in a pedalboard.<br/>
        """))

        # ----------------------------------------------------------------------------------------------------
        # Set up GUI (stopped services)

        self.ui.b_ui_stop.setEnabled(False)
        self.ui.b_sdk_stop.setEnabled(False)

        self.ui.tb_ui.setEnabled(False)
        self.ui.tb_sdk.setEnabled(False)

        self.ui.l_ui_status.setText(self.tr("Stopped"))
        self.ui.l_sdk_status.setText(self.tr("Stopped"))

        # ----------------------------------------------------------------------------------------------------
        # Load Settings

        self.loadSettings()

        # ----------------------------------------------------------------------------------------------------
        # Connect actions to functions

        self.ui.b_clear_logs.clicked.connect(self.slot_clearLogs)

        self.ui.b_ui_start.clicked.connect(self.slot_uiStart)
        self.ui.b_sdk_start.clicked.connect(self.slot_sdkStart)

        self.ui.b_ui_stop.clicked.connect(self.slot_uiStop)
        self.ui.b_sdk_stop.clicked.connect(self.slot_sdkStop)

        self.ui.tb_ui.clicked.connect(self.slot_uiLaunch)
        self.ui.tb_sdk.clicked.connect(self.slot_sdkLaunch)

        self.fProccessBackend.error.connect(self.slot_backendStartError)
        self.fProccessBackend.started.connect(self.slot_backendStartSuccess)
        self.fProccessBackend.finished.connect(self.slot_backendFinished)

        self.fProccessUI.error.connect(self.slot_uiStartError)
        self.fProccessUI.started.connect(self.slot_uiStartSuccess)
        self.fProccessUI.finished.connect(self.slot_uiFinished)

        self.fProccessSDK.error.connect(self.slot_sdkStartError)
        self.fProccessSDK.started.connect(self.slot_sdkStartSuccess)
        self.fProccessSDK.finished.connect(self.slot_sdkFinished)

        # ----------------------------------------------------------------------------------------------------
        # Final setup

        self.fTimerId = self.startTimer(500)

    # --------------------------------------------------------------------------------------------------------
    # Log textBrowser

    @pyqtSlot()
    def slot_clearLogs(self):
        self.ui.text_backend.clear()
        self.ui.text_ui.clear()
        self.ui.text_sdk.clear()

    # --------------------------------------------------------------------------------------------------------
    # UI/SDK

    @pyqtSlot()
    def slot_uiStart(self):
        if self.fProccessBackend.state() != QProcess.NotRunning:
            print("slot_uiStart ignored")
            return

        self.ui.text_backend.clear()
        self.ui.text_ui.clear()
        self.ui.l_ui_status.setText(self.tr("Starting..."))
        self.ui.b_ui_start.setEnabled(False)
        self.ui.b_ui_stop.setEnabled(True)

        self.fStartingBackend = True
        self.fProccessBackend.start(self.localPathToFile("mod-host"), ["-p", "5555", "-f", "5556", "-n"])

    @pyqtSlot()
    def slot_sdkStart(self):
        if self.fProccessSDK.state() != QProcess.NotRunning:
            print("slot_sdkStart ignored")
            return

        #workspacedir = os.path.expanduser("~/mod-workspace")

        #if not os.path.exists(workspacedir):
            #os.mkdir(workspacedir)

        self.ui.text_sdk.clear()
        self.ui.l_sdk_status.setText(self.tr("Starting..."))
        self.ui.b_sdk_start.setEnabled(False)
        self.ui.b_sdk_stop.setEnabled(True)

        self.fStartingSDK = True
        self.fProccessSDK.start(self.localPathToFile("mod-sdk"))

    # --------------------------------------------------------------------------------------------------------

    @pyqtSlot()
    def slot_uiStop(self):
        if self.fProccessUI.state() == QProcess.NotRunning:
            print("slot_uiStop ignored")
            self.stopBackendIfNeeded()
            return

        self.ui.l_ui_status.setText(self.tr("Stopping..."))
        self.ui.b_ui_stop.setEnabled(False)

        self.fStoppingUI = True
        self.fProccessUI.terminate()

    @pyqtSlot()
    def slot_sdkStop(self):
        if self.fProccessSDK.state() == QProcess.NotRunning:
            print("slot_sdkStop ignored")
            return

        self.ui.l_sdk_status.setText(self.tr("Stopping..."))
        self.ui.b_sdk_stop.setEnabled(False)

        self.fStoppingSDK = True
        self.fProccessSDK.terminate()

    # --------------------------------------------------------------------------------------------------------

    @pyqtSlot()
    def slot_uiLaunch(self):
        self.openUrl("http://localhost:8888/")

    @pyqtSlot()
    def slot_sdkLaunch(self):
        self.openUrl("http://localhost:9000/")

    # --------------------------------------------------------------------------------------------------------

    @pyqtSlot(QProcess.ProcessError)
    def slot_backendStartError(self, error):
        self.stopUIIfNeeded()

        # crashed while stopping, ignore
        if error == QProcess.Crashed and self.fStoppingBackend:
            return

        if self.fProccessUI.state() != QProcess.NotRunning:
            self.fStoppingUI = True
            self.fProccessUI.terminate()

        errorStr = self.tr("Could not start MOD UI backend.\n") + self.getProcessErrorAsString(error)

        # show the error message
        QMessageBox.critical(self, self.tr("Error"), errorStr)

    @pyqtSlot(QProcess.ProcessError)
    def slot_uiStartError(self, error):
        self.stopBackendIfNeeded()

        # crashed while stopping, ignore
        if error == QProcess.Crashed and self.fStoppingUI:
            return

        errorStr = self.tr("Could not start MOD UI.\n") + self.getProcessErrorAsString(error)

        # show the error message
        QMessageBox.critical(self, self.tr("Error"), errorStr)

    @pyqtSlot(QProcess.ProcessError)
    def slot_sdkStartError(self, error):
        # crashed while stopping, ignore
        if error == QProcess.Crashed and self.fStoppingSDK:
            return

        errorStr = self.tr("Could not start MOD SDK.\n") + self.getProcessErrorAsString(error)

        # show the error message
        QMessageBox.critical(self, self.tr("Error"), errorStr)

    # --------------------------------------------------------------------------------------------------------

    @pyqtSlot()
    def slot_backendStartSuccess(self):
        self.ui.l_ui_status.setText(self.tr("Starting (2)"))
        self.fStartingUI = True
        self.fProccessUI.start(self.localPathToFile("mod-ui"))

    @pyqtSlot()
    def slot_uiStartSuccess(self):
        self.ui.l_ui_status.setText(self.tr("Running"))
        self.ui.b_ui_start.setEnabled(False)
        self.ui.b_ui_stop.setEnabled(True)
        self.ui.tb_ui.setEnabled(True)

    @pyqtSlot()
    def slot_sdkStartSuccess(self):
        self.ui.l_sdk_status.setText(self.tr("Running"))
        self.ui.b_sdk_start.setEnabled(False)
        self.ui.b_sdk_stop.setEnabled(True)
        self.ui.tb_sdk.setEnabled(True)

    # --------------------------------------------------------------------------------------------------------

    @pyqtSlot(int, QProcess.ExitStatus)
    def slot_backendFinished(self, exitCode, exitStatus):
        self.fStoppingBackend = False

        self.ui.l_ui_status.setText(self.tr("Stopped"))
        self.ui.b_ui_start.setEnabled(True)
        self.ui.b_ui_stop.setEnabled(False)
        self.ui.tb_ui.setEnabled(False)

        self.stopUIIfNeeded()

    @pyqtSlot(int, QProcess.ExitStatus)
    def slot_uiFinished(self, exitCode, exitStatus):
        self.fStoppingUI = False

        self.stopBackendIfNeeded()

    @pyqtSlot(int, QProcess.ExitStatus)
    def slot_sdkFinished(self, exitCode, exitStatus):
        self.fStoppingSDK = False
        self.ui.l_sdk_status.setText(self.tr("Stopped"))
        self.ui.b_sdk_start.setEnabled(True)
        self.ui.b_sdk_stop.setEnabled(False)
        self.ui.tb_sdk.setEnabled(False)

    # --------------------------------------------------------------------------------------------------------
    # Settings

    def saveSettings(self):
        settings = QSettings()
        settings.setValue("Geometry", self.saveGeometry())

    def loadSettings(self):
        settings = QSettings()
        if settings.contains("Geometry"):
            self.restoreGeometry(settings.value("Geometry", ""))

    # --------------------------------------------------------------------------------------------------------
    # Qt events

    def closeEvent(self, event):
        self.saveSettings()

        if self.fProccessSDK.state() != QProcess.NotRunning:
            self.fStoppingSDK = True
            self.fProccessSDK.terminate()
            if not self.fProccessSDK.waitForFinished(500):
                self.fProccessSDK.kill()

        if self.fProccessUI.state() != QProcess.NotRunning:
            self.fStoppingUI = True
            self.fProccessUI.terminate()
            if not self.fProccessUI.waitForFinished(500):
                self.fProccessUI.kill()

        if self.fProccessBackend.state() != QProcess.NotRunning:
            self.fStoppingBackend = True
            self.fProccessBackend.terminate()
            if not self.fProccessBackend.waitForFinished(500):
                self.fProccessBackend.kill()

        QMainWindow.closeEvent(self, event)

    def timerEvent(self, event):
        if event.timerId() == self.fTimerId:
            if self.fStartingBackend or self.fProccessBackend.state() != QProcess.NotRunning:
                text = str(self.fProccessBackend.readAll().trimmed(), encoding="utf-8", errors="ignore")
                if text: self.ui.text_backend.appendPlainText(text)

            if self.fStartingUI or self.fProccessUI.state() != QProcess.NotRunning:
                text = str(self.fProccessUI.readAll().trimmed(), encoding="utf-8", errors="ignore")
                if text: self.ui.text_ui.appendPlainText(text)

            if self.fStartingSDK or self.fProccessSDK.state() != QProcess.NotRunning:
                text = str(self.fProccessSDK.readAll().trimmed(), encoding="utf-8", errors="ignore")
                if text: self.ui.text_sdk.appendPlainText(text)

            self.fStartingBackend = self.fStartingUI = self.fStartingSDK = False

        QMainWindow.timerEvent(self, event)

    # --------------------------------------------------------------------------------------------------------
    # Internal stuff

    def getProcessErrorAsString(self, error):
        if error == QProcess.FailedToStart:
            return self.tr("Process failed to start.")
        if error == QProcess.Crashed:
            return self.tr("Process crashed.")
        if error == QProcess.Timedout:
            return self.tr("Process timed out.")
        if error == QProcess.WriteError:
            return self.tr("Process write error.")
        return self.tr("Unkown error.")

    def openUrl(self, url):
        QDesktopServices.openUrl(QUrl(url))

    def localPathToFile(self, module):
        basepath = os.path.abspath(os.path.dirname(__file__))

        if module == "mod-host":
            return os.path.join(basepath, "mod-host", "mod-host")

        if module == "mod-ui":
            return os.path.join(basepath, "mod-ui.sh")

        if module == "mod-sdk":
            return os.path.join(basepath, "mod-sdk.sh")

    def stopBackendIfNeeded(self):
        if self.fProccessBackend.state() == QProcess.NotRunning:
            return

        self.fStoppingBackend = True
        self.fProccessBackend.terminate()

    def stopUIIfNeeded(self):
        if self.fProccessUI.state() == QProcess.NotRunning:
            return

        self.fStoppingUI = True
        self.fProccessUI.terminate()

    def stopSDKIfNeeded(self):
        if self.fProccessSDK.state() == QProcess.NotRunning:
            return

        self.fStoppingSDK = True
        self.fProccessSDK.terminate()

    def setInformation(self, info):
        self.ui.label_information.setText(info)
# ------------------------------------------------------------------------------------------------------------
# Main

if __name__ == '__main__':
    # --------------------------------------------------------------------------------------------------------
    # App initialization

    app = QApplication(sys.argv)
    app.setApplicationName("MOD-Panel")
    app.setOrganizationName("MOD")
    app.setWindowIcon(QIcon(":/48x48/mod.png"))

    # --------------------------------------------------------------------------------------------------------
    # Set-up custom signal handling

    setUpSignals()

    # --------------------------------------------------------------------------------------------------------
    # Set-up workdir environment as LV2_PATH, if relevant

    lv2_path = os.getenv("LV2_PATH")
    if lv2_path is None:
        WORKDIR = os.getenv("WORKDIR", os.path.expanduser("~/mod-workdir"))
        LV2_PATH = os.path.join(WORKDIR, "x86_64", "plugins")
        if os.path.exists(LV2_PATH):
            os.environ["LV2_PATH"] = LV2_PATH
            lv2_path = LV2_PATH

    # --------------------------------------------------------------------------------------------------------
    # Create and show GUI

    gui = PanelWindow()
    gui.show()

    gui.setInformation("<b>LV2 path:</b><br/>" + "<br/>".join(lv2_path.split(":")))
    # --------------------------------------------------------------------------------------------------------
    # App-Loop

    sys.exit(app.exec_())

# ------------------------------------------------------------------------------------------------------------
